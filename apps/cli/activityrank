#!/usr/bin/env node
// @ts-check

import { defineCommand, runMain } from 'citty';
import { defu } from 'defu';
import { consola } from 'consola';
import { z } from 'zod';
import { $ } from 'execa';
import { readFile } from 'node:fs/promises';
import { API } from '@discordjs/core';
import { REST } from '@discordjs/rest';

const snowflakeSchema = z.string().regex(/^\d{17,20}$/);

process.env.LOAD_LOCAL_CONFIG = '1';

const configSchema = z.object({
  developmentServers: z.array(snowflakeSchema),
});

const keyInstanceSchema = z.object({
  botAuth: z.string().min(1),
  botId: snowflakeSchema,
});

/**
 * A set of paths to load and parse keys and config from.
 * @typedef {Object} ConfigPaths
 * @property {string[]} config Paths to config.json files. Duplicate fields will override each other with highest priority given to the first file in the list.
 * @property {string} keys A path to the keys.json file
 */

/** @typedef {import('./src/bot/util/registry/registry.js').Registry} Registry */
/** @typedef {typeof import('./src/bot/util/registry/command.js').Deploy} Deploy */

/**
 * Load and parse the configuration from a set of optionally provided config paths.
 * @param {ConfigPaths} paths A set of configuration paths to load.
 * @returns A set of validated configuration objects
 */
async function getConfig(paths) {
  /** @type any[] */
  const configElements = [];

  for (const configPath of paths.config ?? ['./config/config.json']) {
    const extraFile = await readFile(configPath);
    configElements.push(JSON.parse(extraFile.toString()));
  }

  const config = defu({}, ...configElements);

  const keyFile = await readFile(paths.keys ?? './config/keys.json');
  const keys = JSON.parse(keyFile.toString());

  return {
    config: configSchema.parse(config),
    keys: keyInstanceSchema.parse(keys),
  };
}

/**
 * Parse an arguments object to a set of paths that can be input to {@link getConfig()}.
 * @param {{ config: string | string[]; keys: string }} args
 * @returns {ConfigPaths}
 */
function argToPaths(args) {
  return {
    config: Array.isArray(args.config) ? args.config : [args.config ?? './config/config.json'],
    keys: args.keys ?? './config/keys.json',
  };
}

/**
 * Load the command data by initialising a registry
 * @returns {Promise<Registry>} A Registry with commands already initialised.
 */
async function getRegistry() {
  consola.start('Building JS dist');
  const build = await $`npm run build`;

  consola.start('Launching registry');
  const { createRegistryCLI } = await import('./dist/bot/util/registry/registry.js');
  const registry = /** @type {Registry} */ (await createRegistryCLI());
  await registry.loadCommands();

  return registry;
}

/**
 * Create a new API interface.
 * @param {Awaited<ReturnType<typeof getConfig>>} conf a configuration object
 */
function getAPI(conf) {
  const rest = new REST();
  rest.setToken(conf.keys.botAuth);

  return new API(rest);
}

const globalArgs = /** @type {const} */ ({
  config: {
    type: 'string',
    description: 'The path to a config.json file. This option may be provided multiple times.',
  },
  keys: {
    type: 'string',
    description: 'The path to a keys.json file.',
  },
});

const deployProd = defineCommand({
  meta: { name: 'production', description: 'Update Discord production application commands' },
  args: { ...globalArgs },
  async run({ args }) {
    const conf = await getConfig(argToPaths(args));
    const api = getAPI(conf);

    const registry = await getRegistry();

    const Deploy = /** @type {Deploy} */ (
      (await import('./dist/bot/util/registry/command.js')).Deploy
    );

    const GLOBAL = 'Update globally deployed commands';
    const ADMIN = 'Update administrative commands';
    const type = await consola.prompt(
      'You are deploying with production credentials. How would you like to deploy?',
      { type: 'select', options: [GLOBAL, ADMIN] },
    );

    if (type === GLOBAL) {
      /** @type {import('@discordjs/core').RESTPutAPIApplicationGuildCommandsJSONBody} */
      const globalCommands = [];

      for (const command of registry.commands.values()) {
        if (command.deploymentMode === Deploy.Global) {
          globalCommands.push(command.data);
        }
      }
      await api.applicationCommands.bulkOverwriteGlobalCommands(conf.keys.botId, globalCommands);
      consola.success(`Successfully deployed ${globalCommands.length} commands to production.`);
    } else if (type === ADMIN) {
      /** @type {import('@discordjs/core').RESTPutAPIApplicationGuildCommandsJSONBody} */
      const localCommands = [];

      for (const command of registry.commands.values()) {
        if (command.deploymentMode === Deploy.LocalOnly) {
          localCommands.push(command.data);
        }
      }

      for (const guild of conf.config.developmentServers) {
        await api.applicationCommands.bulkOverwriteGuildCommands(
          conf.keys.botId,
          guild,
          localCommands,
        );
      }

      consola.success(
        `Successfully deployed ${localCommands.length} administrative commands to ${conf.config.developmentServers.length} production servers.`,
      );
    } else {
      throw new Error('Unreachable invariant');
    }
  },
});

const deploy = defineCommand({
  meta: { name: 'deploy', description: 'Deploy development commands to Discord' },
  args: {
    global: {
      type: 'boolean',
      description: 'Deploy commands globally',
    },
    guilds: {
      type: 'positional',
      required: false,
      description: 'A list of the IDs of guilds to deploy to.',
    },
    ...globalArgs,
  },
  subCommands: { production: deployProd },
  async run({ args }) {
    const overrideGuilds = args._.length > 0;

    const conf = await getConfig(argToPaths(args));
    const api = getAPI(conf);
    const guilds = overrideGuilds
      ? // citty doesn't support variadic arguments yet; ctx.args._ is a workaround
        z.array(snowflakeSchema).parse(args._)
      : conf.config.developmentServers;

    const registry = await getRegistry();

    const Deploy = /** @type {Deploy} */ (
      (await import('./dist/bot/util/registry/command.js')).Deploy
    );

    /** @type {import('@discordjs/core').RESTPutAPIApplicationGuildCommandsJSONBody} */
    const localCommands = [];
    /** @type {import('@discordjs/core').RESTPutAPIApplicationGuildCommandsJSONBody} */
    const globalCommands = [];

    for (const command of registry.commands.values()) {
      if (command.deploymentMode === Deploy.Global) {
        globalCommands.push(command.data);
      } else if (command.deploymentMode === Deploy.LocalOnly) {
        localCommands.push(command.data);
      }
    }

    if (args.global) {
      consola.box(
        `Are you sure you want to deploy ${globalCommands.length} commands globally?\nThis is a development command; you may have meant "commands deploy production"\ninstead of the "--global" flag.`,
      );
      const confirmation = await consola.prompt('Continue to deploy globally?', {
        type: 'confirm',
        initial: false,
      });
      if (confirmation) {
        await api.applicationCommands.bulkOverwriteGlobalCommands(conf.keys.botId, globalCommands);
        consola.success(
          `Wrote ${globalCommands.length} commands globally. Commands that were not permitted to be deployed globally have been ignored.`,
        );
      }
    } else {
      for (const guild of guilds) {
        await api.applicationCommands.bulkOverwriteGuildCommands(conf.keys.botId, guild, [
          ...localCommands,
          ...globalCommands,
        ]);
      }
      consola.success(
        `Wrote ${localCommands.length + globalCommands.length} commands to ${guilds.length} guilds.`,
      );
    }
  },
});

const clearProd = defineCommand({
  meta: { name: 'production', description: 'Clear Discord production application commands' },
  args: { ...globalArgs },
  async run({ args }) {
    const conf = await getConfig(argToPaths(args));
    const api = getAPI(conf);

    const GLOBAL = 'Clear globally deployed commands';
    const ADMIN = 'Clear administrative commands';
    const type = await consola.prompt(
      'You are clearing commands with production credentials. What would you like to clear?',
      { type: 'select', options: [GLOBAL, ADMIN] },
    );

    if (type === GLOBAL) {
      const confirm = await consola.prompt(
        'Are you sure you want to clear all globally deployed production commands?',
        { type: 'confirm', initial: false },
      );
      if (confirm) {
        await api.applicationCommands.bulkOverwriteGlobalCommands(conf.keys.botId, []);
        consola.success(`Successfully cleared all global production commands.`);
      }
    } else if (type === ADMIN) {
      for (const guild of conf.config.developmentServers) {
        await api.applicationCommands.bulkOverwriteGuildCommands(conf.keys.botId, guild, []);
      }

      consola.success(
        `Successfully cleared administrative commands in ${conf.config.developmentServers.length} production servers.`,
      );
    } else {
      throw new Error('Unreachable invariant');
    }
  },
});

const clear = defineCommand({
  meta: { name: 'clear', description: 'Clear deployed development commands' },
  args: {
    global: {
      type: 'boolean',
      description: 'Clear commands globally',
    },
    guilds: {
      type: 'positional',
      required: false,
      description: 'A list of the IDs of guilds to clear commands from.',
    },
    ...globalArgs,
  },
  subCommands: { production: clearProd },
  async run({ args }) {
    const overrideGuilds = args._.length > 0;

    const conf = await getConfig(argToPaths(args));
    const api = getAPI(conf);
    const guilds = overrideGuilds
      ? // citty doesn't support variadic arguments yet; ctx.args._ is a workaround
        z.array(snowflakeSchema).parse(args._)
      : conf.config.developmentServers;

    if (args.global) {
      consola.box(
        'Are you sure you want to clear commands globally?\nThis is a development command; you may have meant "commands clear production"\ninstead of the "--global" flag.',
      );
      const confirmation = await consola.prompt('Continue to clear globally?', {
        type: 'confirm',
        initial: false,
      });
      if (confirmation) {
        await api.applicationCommands.bulkOverwriteGlobalCommands(conf.keys.botId, []);
        consola.success('Cleared commands globally on development bot.');
      }
    } else {
      for (const guild of guilds) {
        await api.applicationCommands.bulkOverwriteGuildCommands(conf.keys.botId, guild, []);
      }
      consola.success(`Cleared commands in ${guilds.length} guilds.`);
    }
  },
});

/*
TODO:
* Show as tree
* Include subcommands
* Compare deployed commands to currently registered commands
*/
const get = defineCommand({
  meta: { name: 'get', description: 'Get information about deployed commands' },
  args: {
    global: {
      type: 'boolean',
      description: 'Get global commands',
    },
    production: {
      type: 'boolean',
      description: 'Use production keys',
    },
    guild: {
      type: 'positional',
      required: false,
      description:
        'A guild ID to check commands from. Defaults to the first ID in config.developmentServers.',
    },
    ...globalArgs,
  },
  async run({ args }) {
    const conf = await getConfig(argToPaths(args));
    const api = getAPI(conf);

    const botInfo = await api.applications.getCurrent();
    consola.info(`Command informaton for ${botInfo.name}`);

    if (args.global) {
      const globalCommands = await api.applicationCommands.getGlobalCommands(conf.keys.botId);
      consola.info(`Global commands: [${globalCommands.length}]`);
      console.log(globalCommands.map((c) => `- ${c.name}`).join('\n'));
    }
    if (args.guild || conf.config.developmentServers.length > 0) {
      const guildCommands = await api.applicationCommands.getGuildCommands(
        conf.keys.botId,
        args.guild ?? conf.config.developmentServers[0],
      );
      consola.info(`Guild commands: [${guildCommands.length}]`);
      console.log(guildCommands.map((c) => `- ${c.name}`).join('\n'));
    }
  },
});

const commands = defineCommand({
  meta: { name: 'commands', description: "Manage ActivityRank's commands" },
  subCommands: { deploy, clear, get },
});

const main = defineCommand({
  meta: {
    name: 'activityrank',
    description: 'A CLI utility for ActivityRank',
  },
  subCommands: { commands },
});

runMain(main);
